## Условные операторы:

```
**If - Else условный оператор**
If условие_1:
    -тело
elif:
    -тело
else:
    -тело

Пример:
    Проверка на четность
    if x % 2 == 0:
        print("Четное")
    else:
        print("Нечетное")
```
## Формат вывода
```
print("Привет {} !".format(name))
```
___
## ООП в Python
### Наследование


**Можно наследовать методы от классов не создавая их заново.**
~~~
Например:

Class Auto:
    def ride(self):
        print("Riding on a ground")

Class Boat: 
    def swim(self):
        print("Swimming on a water")
~~~

**Теперь создаем класс Амфибия который унаследует возможности и лодки и машины**

~~~
Class Amfibia(Auto,Boat):
    pass
a = Amfibia()
a.ride()
a.swim()
~~~
___

#### Примеси (Mixins) в Python

Использование множественного наследования, позволяет нам создавать, так называемые, классы-примеси или миксины. Представим, что мы программируем класс для автомобиля. Мы хотим, чтобы у нас была возможность слушать музыку в машине. Конечно, можно просто добавить метод **play_music()** в класс Car:

~~~
class Car:
    def ride(self):
        print("Riding a car")
 
    def play_music(self, song):
        print("Now playing: {} ".format(song))
 
>>> c = Car()
>>> c.ride()
Riding a car
>>> c.play_music("Queen - Bohemian Rhapsody")
Now playing: Queen - Bohemian Rhapsody
~~~

Но что если, у нас есть еще и телефон, радио или любой другой девайс, с которого мы будем слушать музыку. В таком случае, лучше вынести функционал проигрывания музыки в отдельный класс-миксин:
~~~
class MusicPlayerMixin:
    def play_music(self, song):
        print("Now playing: {}".format(song))
~~~
Мы можем "домешивать" этот класс в любой, где нужна функция проигрывания музыки:

~~~
class Smartphone(MusicPlayerMixin):
    pass
 
 
class Radio(MusicPlayerMixin):
    pass
 
 
class Amphibian(Auto, Boat, MusicPlayerMixin):
   pass

~~~